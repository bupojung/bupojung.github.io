<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 控件, | Bupo's Blog]]></title>
  <link href="http://bupojung.github.io/blog/categories/kong-jian/atom.xml" rel="self"/>
  <link href="http://bupojung.github.io/"/>
  <updated>2016-06-03T19:29:00+08:00</updated>
  <id>http://bupojung.github.io/</id>
  <author>
    <name><![CDATA[bupo]]></name>
    <email><![CDATA[bupo.jung@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[实现一个控件的思路]]></title>
    <link href="http://bupojung.github.io/blog/2016/06/03/shi-xian-%5B%3F%5D-ge-kong-jian-de-si-lu/"/>
    <updated>2016-06-03T19:24:09+08:00</updated>
    <id>http://bupojung.github.io/blog/2016/06/03/shi-xian-[?]-ge-kong-jian-de-si-lu</id>
    <content type="html"><![CDATA[<h3>实现一个控件的思路</h3>

<p>——易用性和可扩展性
@(学习)[objecitve-c, 控件, 封装,组合,继承,设计模式]</p>

<p>by bupo.</p>

<p>这里通过实现一个弹出菜单控件为例。弹出菜单如图所示，菜单可以有多行，每一行有多个选项，每一行可能有个标题，每行有多个选项，如果选项个数超过屏幕范围可以左右滑动。点击选项执行对应的功能模块。这里把这个控件命名为ScrollActionSheet。
<img src="/static/2016/06/03/actionSheet.jpg" alt="Alt text" /></p>

<h4>实现</h4>

<p>通过界面和需求可以分析出，ScrollActionSheet 包含几个部分：
- 选项按钮ActionSheetItemView；
- 包含多个选项和标题的一个可滑动模块HorizontleScrollPannel；
- 取消按钮，就是一个简单的button；</p>

<p>这三个部分是ScrollActionSheet的UI，这几个模块中，我们需要找出哪些东西是会变化的，哪些是不变化的，然后把变化的部分独立出来，把不变的封装起来。用户使用的时候只需要通过继承或者组合的方式修改可变的部分就可以使用这个ScrollActionSheet。可以看出用户可能改变的部分都在ActionSheetItemView中，包括图片，标题，点击后的回调方法，还有这个ActionSheetItemView的大小和布局；而HorizontleScrollPanner和整个ScrollActionSheet不需要去改动。
所以这里ActionSheetItemView 需要负责布局和展示自己的内容，所以我们独立出另一个类ActionSheetItem。大概的关系如下图所示：
<img src="(/static/2016/06/03/ActionSheetClass.png" alt="Alt text" /></p>

<p>使用的时候只需要创建ActionSheetItem添加到ScrollActionSheet中展示就可以了
```objectivec</p>

<h1>pragma mark - config action sheet</h1>

<ul>
<li><p>(void)showShareView
{
  NSMutableArray <em>shareItems = [NSMutableArray array];
  NSMutableArray </em>moreItems = [NSMutableArray array];</p>

<p>  [shareItems addObject:[BPScrollActionSheetItem itemWithImage:BPIMAGE(@&ldquo;more_icon_share_wx.png&rdquo;) title:@&ldquo;微信好友&rdquo; action:^(BPBaseActionSheetItem <em>item){
      NSLog(@&ldquo;item click:%@&rdquo;,item);
  }]];
  [shareItems addObject:[BPScrollActionSheetItem itemWithImage:BPIMAGE(@&ldquo;more_icon_share_friends.png&rdquo;) title:@&ldquo;微信朋友圈&rdquo; action:^(BPBaseActionSheetItem </em>item){
      NSLog(@&ldquo;item click:%@&rdquo;,item);
  }]];
  [shareItems addObject:[BPScrollActionSheetItem itemWithImage:BPIMAGE(@&ldquo;more_icon_share_qq.png&rdquo;) title:@&ldquo;QQ好友&rdquo; action:^(BPBaseActionSheetItem <em>item){
      NSLog(@&ldquo;item click:%@&rdquo;,item);
  }]];
  [shareItems addObject:[BPScrollActionSheetItem itemWithImage:BPIMAGE(@&ldquo;more_icon_share_qzone.png&rdquo;) title:@&ldquo;QQ空间&rdquo; action:^(BPBaseActionSheetItem </em>item){
      NSLog(@&ldquo;item click:%@&rdquo;,item);
  }]];</p>

<p>  BPLongActionSheetItem <em>item = [BPLongActionSheetItem itemWithImage:BPIMAGE(@&ldquo;qualifying_icon_set&rdquo;) title:@&ldquo;偏好设置&rdquo; subTitle:@&ldquo;啦啦啦编辑偏好设置啊&rdquo; action:^(BPBaseActionSheetItem </em>item){
      NSLog(@&ldquo;item click:%@&rdquo;,item);
  }];</p>

<p>  [moreItems addObject:item];</p>

<p>  NSDictionary *section = nil;
  if ([shareItems count] > 0) {
      section = @{
                  @&ldquo;title&rdquo;:@&ldquo;掐指一算，你还缺几个兄弟啊！火速召唤他们&rdquo;,
                  @&ldquo;items&rdquo;:shareItems,
                  };
  }</p>

<p>  NSDictionary *upperSection = @{
                                 @&ldquo;title&rdquo;:@&ldquo;haha &rdquo;,
                                 @&ldquo;items&rdquo;:moreItems,
                                 };</p>

<p>  NSArray <em>sections = nil;
  sections = @[upperSection,section];
  BPScrollActionSheet </em>actionSheet = [[BPScrollActionSheet alloc] initWithItems:sections description:nil cancelButtonTitle:@&ldquo;取消&rdquo;];
  [actionSheet showInView:self.view];</p>

<p>  return;
}
```
如上面代码所示，LongActionSheetItem继承自ActionSheetItem，比ActionSheetItem多了一个小标题字段，其对应的View为LongActionsSheetItemView负责自定义布局，对于自定义的Item用户只需要继承ActionSheetItem和ActionSheetItemView自定义内容和布局即可。
<img src="(/static/2016/06/03/ActionSheetDemo.png" alt="Alt text" /></p></li>
</ul>


<p>这里通过组合封装达到了易用性的目的，而可扩展性则通过独立出可变模块，通过组合，继承来实现。具体的代码稍后会上传到github，点击这里<a href="https://github.com/bupojung/BPActionScrollActionSheet">下载</a></p>
]]></content>
  </entry>
  
</feed>
