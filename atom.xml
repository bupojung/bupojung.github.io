<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Bupo's Blog]]></title>
  <link href="http://bupojung.github.io/atom.xml" rel="self"/>
  <link href="http://bupojung.github.io/"/>
  <updated>2016-06-03T19:37:35+08:00</updated>
  <id>http://bupojung.github.io/</id>
  <author>
    <name><![CDATA[bupo]]></name>
    <email><![CDATA[bupo.jung@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[实现一个控件的思路]]></title>
    <link href="http://bupojung.github.io/blog/2016/06/03/shi-xian-%5B%3F%5D-ge-kong-jian-de-si-lu/"/>
    <updated>2016-06-03T19:24:09+08:00</updated>
    <id>http://bupojung.github.io/blog/2016/06/03/shi-xian-[?]-ge-kong-jian-de-si-lu</id>
    <content type="html"><![CDATA[<h3>实现一个控件的思路</h3>

<p>——易用性和可扩展性
@(学习)[objecitve-c, 控件, 封装,组合,继承,设计模式]</p>

<p>by bupo.</p>

<p>这里通过实现一个弹出菜单控件为例。弹出菜单如图所示，菜单可以有多行，每一行有多个选项，每一行可能有个标题，每行有多个选项，如果选项个数超过屏幕范围可以左右滑动。点击选项执行对应的功能模块。这里把这个控件命名为ScrollActionSheet。</p>

<!-- more -->


<p><img src="http://bupojung.github.io/static/2016/06/03/actionSheet.jpg" alt="Alt text" /></p>

<h4>实现</h4>

<p>通过界面和需求可以分析出，ScrollActionSheet 包含几个部分：
- 选项按钮ActionSheetItemView；
- 包含多个选项和标题的一个可滑动模块HorizontleScrollPannel；
- 取消按钮，就是一个简单的button；</p>

<p>这三个部分是ScrollActionSheet的UI，这几个模块中，我们需要找出哪些东西是会变化的，哪些是不变化的，然后把变化的部分独立出来，把不变的封装起来。用户使用的时候只需要通过继承或者组合的方式修改可变的部分就可以使用这个ScrollActionSheet。可以看出用户可能改变的部分都在ActionSheetItemView中，包括图片，标题，点击后的回调方法，还有这个ActionSheetItemView的大小和布局；而HorizontleScrollPanner和整个ScrollActionSheet不需要去改动。
所以这里ActionSheetItemView 需要负责布局和展示自己的内容，所以我们独立出另一个类ActionSheetItem。大概的关系如下图所示：
<img src="http://bupojung.github.io/static/2016/06/03/ActionSheetClass.png" alt="Alt text" /></p>

<p>使用的时候只需要创建ActionSheetItem添加到ScrollActionSheet中展示就可以了</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">showShareView</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">shareItems</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSMutableArray</span> <span class="o">*</span><span class="n">moreItems</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSMutableArray</span> <span class="n">array</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">shareItems</span> <span class="nl">addObject</span><span class="p">:[</span><span class="n">BPScrollActionSheetItem</span> <span class="nl">itemWithImage</span><span class="p">:</span><span class="n">BPIMAGE</span><span class="p">(</span><span class="s">@&quot;more_icon_share_wx.png&quot;</span><span class="p">)</span> <span class="nl">title</span><span class="p">:</span><span class="s">@&quot;微信好友&quot;</span> <span class="nl">action</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">BPBaseActionSheetItem</span> <span class="o">*</span><span class="n">item</span><span class="p">){</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;item click:%@&quot;</span><span class="p">,</span><span class="n">item</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}]];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">shareItems</span> <span class="nl">addObject</span><span class="p">:[</span><span class="n">BPScrollActionSheetItem</span> <span class="nl">itemWithImage</span><span class="p">:</span><span class="n">BPIMAGE</span><span class="p">(</span><span class="s">@&quot;more_icon_share_friends.png&quot;</span><span class="p">)</span> <span class="nl">title</span><span class="p">:</span><span class="s">@&quot;微信朋友圈&quot;</span> <span class="nl">action</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">BPBaseActionSheetItem</span> <span class="o">*</span><span class="n">item</span><span class="p">){</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;item click:%@&quot;</span><span class="p">,</span><span class="n">item</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}]];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">shareItems</span> <span class="nl">addObject</span><span class="p">:[</span><span class="n">BPScrollActionSheetItem</span> <span class="nl">itemWithImage</span><span class="p">:</span><span class="n">BPIMAGE</span><span class="p">(</span><span class="s">@&quot;more_icon_share_qq.png&quot;</span><span class="p">)</span> <span class="nl">title</span><span class="p">:</span><span class="s">@&quot;QQ好友&quot;</span> <span class="nl">action</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">BPBaseActionSheetItem</span> <span class="o">*</span><span class="n">item</span><span class="p">){</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;item click:%@&quot;</span><span class="p">,</span><span class="n">item</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}]];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">shareItems</span> <span class="nl">addObject</span><span class="p">:[</span><span class="n">BPScrollActionSheetItem</span> <span class="nl">itemWithImage</span><span class="p">:</span><span class="n">BPIMAGE</span><span class="p">(</span><span class="s">@&quot;more_icon_share_qzone.png&quot;</span><span class="p">)</span> <span class="nl">title</span><span class="p">:</span><span class="s">@&quot;QQ空间&quot;</span> <span class="nl">action</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">BPBaseActionSheetItem</span> <span class="o">*</span><span class="n">item</span><span class="p">){</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;item click:%@&quot;</span><span class="p">,</span><span class="n">item</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}]];</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">BPLongActionSheetItem</span> <span class="o">*</span><span class="n">item</span> <span class="o">=</span> <span class="p">[</span><span class="n">BPLongActionSheetItem</span> <span class="nl">itemWithImage</span><span class="p">:</span><span class="n">BPIMAGE</span><span class="p">(</span><span class="s">@&quot;qualifying_icon_set&quot;</span><span class="p">)</span> <span class="nl">title</span><span class="p">:</span><span class="s">@&quot;偏好设置&quot;</span> <span class="nl">subTitle</span><span class="p">:</span><span class="s">@&quot;啦啦啦编辑偏好设置啊&quot;</span> <span class="nl">action</span><span class="p">:</span><span class="o">^</span><span class="p">(</span><span class="n">BPBaseActionSheetItem</span> <span class="o">*</span><span class="n">item</span><span class="p">){</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;item click:%@&quot;</span><span class="p">,</span><span class="n">item</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">moreItems</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">item</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">section</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">shareItems</span> <span class="n">count</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">section</span> <span class="o">=</span> <span class="l">@{</span>
</span><span class='line'>                    <span class="s">@&quot;title&quot;</span><span class="o">:</span><span class="s">@&quot;掐指一算，你还缺几个兄弟啊！火速召唤他们&quot;</span><span class="p">,</span>
</span><span class='line'>                    <span class="s">@&quot;items&quot;</span><span class="o">:</span><span class="n">shareItems</span><span class="p">,</span>
</span><span class='line'>                    <span class="l">}</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">upperSection</span> <span class="o">=</span> <span class="l">@{</span>
</span><span class='line'>                                   <span class="s">@&quot;title&quot;</span><span class="o">:</span><span class="s">@&quot;haha &quot;</span><span class="p">,</span>
</span><span class='line'>                                   <span class="s">@&quot;items&quot;</span><span class="o">:</span><span class="n">moreItems</span><span class="p">,</span>
</span><span class='line'>                                   <span class="l">}</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">sections</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="n">sections</span> <span class="o">=</span> <span class="l">@[</span><span class="n">upperSection</span><span class="p">,</span><span class="n">section</span><span class="l">]</span><span class="p">;</span>
</span><span class='line'>    <span class="n">BPScrollActionSheet</span> <span class="o">*</span><span class="n">actionSheet</span> <span class="o">=</span> <span class="p">[[</span><span class="n">BPScrollActionSheet</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithItems</span><span class="p">:</span><span class="n">sections</span> <span class="nl">description</span><span class="p">:</span><span class="nb">nil</span> <span class="nl">cancelButtonTitle</span><span class="p">:</span><span class="s">@&quot;取消&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">actionSheet</span> <span class="nl">showInView</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">view</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如上面代码所示，LongActionSheetItem继承自ActionSheetItem，比ActionSheetItem多了一个小标题字段，其对应的View为LongActionsSheetItemView负责自定义布局，对于自定义的Item用户只需要继承ActionSheetItem和ActionSheetItemView自定义内容和布局即可。
<img src="http://bupojung.github.io/static/2016/06/03/ActionSheetDemo.png" alt="Alt text" /></p>

<p>这里通过组合封装达到了易用性的目的，而可扩展性则通过独立出可变模块，通过组合，继承来实现。具体的代码稍后会上传到github，点击这里<a href="https://github.com/bupojung/BPActionScrollActionSheet">下载</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Javascript原生交互解决方]]></title>
    <link href="http://bupojung.github.io/blog/2016/06/01/javascriptyuan-sheng-jiao-hu-jie-jue-fang/"/>
    <updated>2016-06-01T20:13:42+08:00</updated>
    <id>http://bupojung.github.io/blog/2016/06/01/javascriptyuan-sheng-jiao-hu-jie-jue-fang</id>
    <content type="html"><![CDATA[<h3>Javascript原生交互解决方案</h3>

<p>@(学习)[objecitve-c, javascript,native]
by bupo.</p>

<h4>简介</h4>

<p>在终端应用开发过程中经常需要在H5页面中调用原生接口来使用原生服务，所以就有了Javascript与原生代码交互的需求，这里终结一下以前在项目中使用的一种解决方案。
原理很简单，通过在UIWebView的代理中截获window.location.href 跳转请求来响应Javascript请求，并通过UIWebview 提供的执行JS代码的接口stringByEvaluatingJavaScriptFromString 将原始执行结果回调给H5页面。</p>

<!-- more -->


<h4>具体实施</h4>

<p>首先终端和H5确定好调用协议，这里以获取经纬度为例</p>

<pre><code>jsbridge://getLocation/callback=xx#seq
</code></pre>

<p>其中jsbridge是我们自定义的一个协议名，用来区分是调用原生接口的请求还是网络请求，getLocation是接口名称，"/&ldquo;和“#”之前是参数对，多个参数用&amp;链接，“#”后的seq是调用回调函数的时候传回给JS代码的序列号，用于在多次调用时区分是那一次调用，如果不需要回调给JS可以不传。
下面是H5代码示例，页面中有一个按钮，点击按钮发起原生调用请求。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!doctype html public &quot;-//w3c//dtd html 4.0 transitional//en&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'><span class="nt">&lt;head&gt;</span>
</span><span class='line'> <span class="nt">&lt;title&gt;</span> JS原生交互示例 <span class="nt">&lt;/title&gt;</span>
</span><span class='line'> <span class="nt">&lt;meta</span> <span class="na">charset=</span><span class="s">&quot;utf-8&quot;</span><span class="nt">&gt;</span>
</span><span class='line'> <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;generator&quot;</span> <span class="na">content=</span><span class="s">&quot;editplus&quot;</span><span class="nt">&gt;</span>
</span><span class='line'> <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;author&quot;</span> <span class="na">content=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'> <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;keywords&quot;</span> <span class="na">content=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'> <span class="nt">&lt;meta</span> <span class="na">name=</span><span class="s">&quot;description&quot;</span> <span class="na">content=</span><span class="s">&quot;&quot;</span><span class="nt">&gt;</span>
</span><span class='line'> <span class="nt">&lt;script </span><span class="na">language=</span><span class="s">&quot;javascript&quot;</span> <span class="na">type=</span><span class="s">&quot;text/javascript&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">call_getLocation</span><span class="p">(){</span>
</span><span class='line'>  <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">href</span><span class="o">=</span><span class="s2">&quot;jsbridge://getLocation/callback=showData#1&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">showData</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="nx">info</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">alert</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">info</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'> <span class="nt">&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;/head&gt;</span>
</span><span class='line'><span class="nt">&lt;body&gt;</span>
</span><span class='line'><span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">onclick=</span><span class="s">&quot;call_getLocation()&quot;</span> <span class="na">value=</span><span class="s">&quot;location&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在UIWebviewController的代理中捕获请求，判断是原生请求并调用相应接口。代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">webView:</span><span class="p">(</span><span class="bp">UIWebView</span> <span class="o">*</span><span class="p">)</span><span class="nv">webView</span> <span class="nf">shouldStartLoadWithRequest:</span><span class="p">(</span><span class="bp">NSURLRequest</span> <span class="o">*</span><span class="p">)</span><span class="nv">request</span> <span class="nf">navigationType:</span><span class="p">(</span><span class="n">UIWebViewNavigationType</span><span class="p">)</span><span class="nv">navigationType</span> <span class="p">{</span>
</span><span class='line'>    <span class="bp">NSURL</span> <span class="o">*</span><span class="n">requestURL</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">URL</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">urlString</span> <span class="o">=</span> <span class="p">[</span><span class="n">requestURL</span> <span class="n">absoluteString</span><span class="p">];</span>
</span><span class='line'>    <span class="kt">BOOL</span> <span class="n">shouldStartLoad</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">urlString</span> <span class="nl">hasPrefix</span><span class="p">:</span><span class="s">@&quot;jsbridge://&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span> <span class="nl">decodeCMDandParams</span><span class="p">:[</span><span class="n">urlString</span> <span class="nl">substringFromIndex</span><span class="p">:</span><span class="n">kJSBridgePre</span><span class="p">.</span><span class="n">length</span><span class="p">]];</span>
</span><span class='line'>        <span class="n">shouldStartLoad</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">shouldStartLoad</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>decodeCMDandParams 方法解析出接口名和参数，利用OC runtime特性执行对应原生代码。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">decodeCMDandParams:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">cmdAndParams</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">QBLogDebug</span><span class="p">(</span><span class="s">@&quot;request cmd and params:%@&quot;</span><span class="p">,</span><span class="n">cmdAndParams</span><span class="p">);</span>
</span><span class='line'>    <span class="bp">NSArray</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="n">cmdAndParams</span> <span class="nl">componentsSeparatedByString</span><span class="p">:</span><span class="s">@&quot;/&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">cmd</span> <span class="o">=</span> <span class="p">[</span><span class="n">data</span> <span class="n">firstObject</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSDictionary</span> <span class="o">*</span><span class="n">params</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">data</span> <span class="n">count</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">params</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">parseParams</span><span class="p">:</span><span class="n">data</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span> <span class="nl">invokeWithCMD</span><span class="p">:</span><span class="n">cmd</span> <span class="nl">andParams</span><span class="p">:</span><span class="n">params</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">invokeWithCMD:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">cmd</span> <span class="nf">andParams:</span><span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">params</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">cmd</span> <span class="o">==</span> <span class="nb">nil</span> <span class="o">||</span> <span class="n">cmd</span><span class="p">.</span><span class="n">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="kt">SEL</span> <span class="n">selector</span> <span class="o">=</span> <span class="n">NSSelectorFromString</span><span class="p">([</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;Test_%@:&quot;</span><span class="p">,</span><span class="n">cmd</span><span class="p">]);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="nb">self</span> <span class="nl">respondsToSelector</span><span class="p">:</span><span class="n">selector</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'><span class="cp">#pragma clang diagnostic push</span>
</span><span class='line'><span class="cp">#pragma clang diagnostic ignored &quot;-Warc-performSelector-leaks&quot;</span>
</span><span class='line'>        <span class="p">[</span><span class="nb">self</span> <span class="nl">performSelector</span><span class="p">:</span><span class="n">selector</span> <span class="nl">withObject</span><span class="p">:</span><span class="n">params</span><span class="p">];</span>
</span><span class='line'><span class="cp">#pragma clang diagnostic pop</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样只需要和前端定好交互协议，并实现对应的原生接口就可以完成JS调用原生接口的功能。
接下来是将原生接口的执行结果回调给JS代码，这个比较简单，通过在参数中解析得到callback参数，将结果拼接成JS代码调用stringByEvaluatingJavaScriptFromString方法就行了。具体代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">excuteCallback:</span><span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">callback</span> <span class="nf">argments:</span><span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">dic</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">callback</span> <span class="o">==</span> <span class="nb">nil</span> <span class="o">||</span> <span class="n">callback</span><span class="p">.</span><span class="n">length</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">){</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">dic</span><span class="p">)</span> <span class="n">dic</span> <span class="o">=</span> <span class="l">@{}</span><span class="p">;</span>
</span><span class='line'>    <span class="bp">NSInteger</span> <span class="n">s</span> <span class="o">=</span> <span class="p">[[</span><span class="n">dic</span> <span class="nl">objectForKey</span><span class="p">:</span><span class="n">kSequence</span><span class="p">]</span><span class="n">integerValue</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// dic to string</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">arguments</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">serializeCallbackArgumentWithObject</span><span class="p">:</span><span class="n">dic</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">jsFunction</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSString</span> <span class="nl">stringWithFormat</span><span class="p">:</span><span class="s">@&quot;%@(%lu,%@)&quot;</span><span class="p">,</span><span class="n">callback</span><span class="p">,</span><span class="n">s</span><span class="p">,</span><span class="n">arguments</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">webView</span> <span class="nl">stringByEvaluatingJavaScriptFromString</span><span class="p">:</span><span class="n">jsFunction</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="bp">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nf">serializeCallbackArgumentWithObject:</span><span class="p">(</span><span class="bp">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">object</span><span class="p">{</span>
</span><span class='line'>    <span class="bp">NSData</span> <span class="o">*</span><span class="n">data</span> <span class="o">=</span> <span class="p">[</span><span class="bp">NSJSONSerialization</span> <span class="nl">dataWithJSONObject</span><span class="p">:</span><span class="n">object</span> <span class="nl">options</span><span class="p">:</span><span class="mi">0</span> <span class="nl">error</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>    <span class="bp">NSString</span> <span class="o">*</span><span class="n">str</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithData</span><span class="p">:</span><span class="n">data</span> <span class="nl">encoding</span><span class="p">:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">str</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>完整的代码可以在这里<a href="https://github.com/bupojung/BPJSNativeInteract">下载</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS无障碍支持总结——VoiceOver]]></title>
    <link href="http://bupojung.github.io/blog/2015/12/28/ioswu-zhang-ai-zhi-chi-zong-jie-voiceover/"/>
    <updated>2015-12-28T23:08:23+08:00</updated>
    <id>http://bupojung.github.io/blog/2015/12/28/ioswu-zhang-ai-zhi-chi-zong-jie-voiceover</id>
    <content type="html"><![CDATA[<p>最近参加的一个项目需要完全支持无障碍，在iOS中既为VoiceOver,用于支持视觉有障碍的人士使用iOS上的移动应用，提供语音反馈实现无障碍的操作体验。在iOS中使用UIAccessibility API支持VoiceOver。 在支持无障碍体验的开发中涉及到几种情况：</p>

<ul>
<li>标准控件（StandardControls）即UIButton、UITableView、UISegmentedControld等；</li>
<li>UIView和继承自UIView的自定义控件;</li>
<li>除去前面两种情况的需要相应VoiceOver的界面区域，比如通过绘制在UIView上的图形，或者文字区域，既不是标准控件也不是UIView。</li>
</ul>


<!-- more -->


<p>下面分几种情况介绍：</p>

<h5>1. 标准控件：</h5>

<p>标准控件默认支持VoiceOver,不需要做太多的设置，只需要通过UIAccessibility接口设置对应的属性就可以达到大部分的无障碍支持需求，用的比较多的属性有：
accessibilityLabel:此属性用于描述控件的功能或内容，当用户触摸到控件区域，就会播放相应的描述内 容；
accessibilityHint:用于描述控件激活后的动作，一般是一个动词开头的短语，例如：对于UIButton，当用户双击时将播放此属性的描述内容；
accessibilityElementsHidden:是一个BOOL属性，用于隐藏控件，使控件不响应VoiceOver触摸，设置控件的hidden属性只能隐藏控件的可视区域，但是对VoiceOver是无效的，如果要使控件不响应VoiceOver，将此属性设置为YES. accessibilityTraits:UIAccessibilityTraits,用于描述控件的特性，是一个组合属性，即可以通过多个UIAccessibilityTraits或操作组合属性。对于标准控件，都有其默认值描述对应控件的特征，而自定义控件的默认值为UIAccessibilityTraitNone，举个例子，UIButton该属性默认值为UIAccessibilityTraitButton,当用户触摸时将会播放accessibilityLabel的描述内容+“按钮”，如果按钮被disable,则应该像如下设置此属性：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">btn</span><span class="p">.</span> <span class="n">accessibilityTraits</span> <span class="o">=</span> <span class="n">UIAccessibilityTraitButton</span>  <span class="o">|</span>  <span class="n">UIAccessibilityTraitNotEnabled</span>
</span></code></pre></td></tr></table></div></figure>


<p>当触摸到该按钮是将播放“xxx按钮，变灰”。 另一个例子，比如一个UILabel显示秒表，将每秒更新label显示的内容，则可以如下设置其traits：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">label</span><span class="p">.</span><span class="n">accessibilityTraits</span> <span class="o">=</span> <span class="n">UIAccessibilityTraitUpdatesFrequently</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样当lable处于选中状态时，如果更新accessibilityLabel,系统将定时播放label内容。 以上是UIKit标准控件进行无障碍支持时常用到的一些属性，这些属性在自定控件中也同样可用。</p>

<h5>2. 自定义控件（UIView or SubClass of UIView）:</h5>

<p>默认情况下自定义控件是不支持VoiceOver的。可以通过两种方式使其支持VoiceOver： 1）实现isAccessibilityElement协议，在UIView子类中实现此协议返回YES；
2）直接设置isAccessibilityElement属性，将其设置为YES； 自定义其他属性和标准控件一样，就不需赘述，以下说说需要注意的几点：
1）.父View如果设置isAccessibilityElement为YES,则其子View将都不能相应VoiceOver,如果如果需要两个View都支持VoiceOver,只能改变他们的层次结构，并都设置为isAccessibilityElement.
2）.如果想让一个view独占响应voiceover,可以将isAccessibilityViewIsModel设置为YES,则其siblings 将忽略VoiceOver事件。
3).在某些情况下,希望控件在VoiceOver模式下直接处理touch事件,比如,画图功能,画布需要处理触摸事件,而在voiceOver开启的情况下,touch事件会被block,这时就需要设置画布的accessibilityTraits:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">paintCanvas</span><span class="p">.</span><span class="n">accessibilityTraits</span> <span class="o">|=</span> <span class="n">UIAccessibilityTraitAllowsDirectInteraction</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h5>3. 其他情况：</h5>

<p>在自定义view中有时包含了一些非标准控件也非UIView子类的可触摸UI原素,比如通过draw方法画出来的区域,则以上的两种情况都不能实现无障碍体验,这种情况下,则需要实现UIAccessibilityContainer Protocol来实现.UIAccessibilityContainer Protocol是非正式协议,只需要实现以下接口:
1)定义一个NSMutableArray属性,用于保存所有的accessible Elements. @property(nonatomic, strong) NSMutableArray *accessibleElements;
2)- (NSInteger)accessibilityElementCount方法,返回Element个数;
3)- (id)accessibilityElementAtIndex:(NSInteger)index;返回对应index下的UIAccessibilityElement;
4)实现- (bool)isAccessibilityElement;返回NO,正如之前提到,父View如果为AccessibilityElement,子element将不响应voiceover,所以这里要返回NO; 在生成每个区域的UIAccessibleElement需要定义element关联的frame,,其它的和标准控件一致,举例子:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="bp">CGRect</span> <span class="n">frame</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">convertRect</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="nl">accessibilityFramefromView</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="bp">UIAccessibilityElement</span> <span class="o">*</span><span class="n">counterElement</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">UIAccessibilityElement</span> <span class="n">alloc</span><span class="p">]</span>
</span><span class='line'><span class="bp">CGRect</span> <span class="n">textFrame</span> <span class="o">=</span> <span class="n">CGRectInset</span><span class="p">(</span><span class="n">frame</span><span class="p">,</span> <span class="n">UYLCOUNTERVIEW_MARGIN</span> <span class="o">+</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">startButton</span><span class="p">.</span><span class="n">bounds</span><span class="p">.</span><span class="n">size</span><span class="p">.</span><span class="n">width</span> <span class="o">+</span>
</span><span class='line'><span class="n">UYLCOUNTERVIEW_MARGIN</span><span class="p">,</span>
</span><span class='line'><span class="n">UYLCOUNTERVIEW_MARGIN</span><span class="p">);</span>
</span><span class='line'><span class="n">counterElement</span><span class="p">.</span><span class="n">accessibilityFrame</span> <span class="o">=</span> <span class="p">[</span><span class="nb">self</span> <span class="nl">convertRect</span><span class="p">:</span><span class="n">textFrame</span> <span class="nl">toView</span><span class="p">:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="n">counterElement</span><span class="p">.</span><span class="n">accessibilityLabel</span> <span class="o">=</span> <span class="n">NSLocalizedString</span><span class="p">(</span><span class="s">@&quot;Duration&quot;</span><span class="p">,</span> <span class="nb">nil</span><span class="p">);</span>
</span><span class='line'><span class="n">counterElement</span><span class="p">.</span><span class="n">accessibilityValue</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSNumber</span>
</span><span class='line'><span class="nl">numberWithInteger</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">secondsCounter</span><span class="p">]</span>
</span><span class='line'><span class="n">stringValueAsTime</span><span class="p">];</span>
</span><span class='line'><span class="n">counterElement</span><span class="p">.</span><span class="n">accessibilityTraits</span> <span class="o">=</span> <span class="n">UIAccessibilityTraitUpdatesFrequently</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="n">_accessibleElements</span> <span class="nl">addObject</span><span class="p">:</span><span class="n">counterElement</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>在界面发生变化时要更新accessibilityElement对应的frame.</p>

<h5>4. 通知：</h5>

<p>1）在进入界面是将VoiceOver焦点定位到特定控件。可以使用UIAccessibilityPostNotification发送通知给特定控件，改变voiceOver焦点：（ call UIAccessibilityPostNotification using both the notification UIAccessibilityScreenChangedNotification (which tells VoiceOver that the contents of the screen has changed) and the element you’d like to give focus to)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="k">@implementation</span> <span class="nc">MyViewController</span>
</span><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewDidAppear:</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nv">animated</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'><span class="p">[</span><span class="nb">super</span> <span class="nl">viewDidAppear</span><span class="p">:</span><span class="n">animated</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'><span class="n">UIAccessibilityPostNotification</span><span class="p">(</span><span class="n">UIAccessibilityScreenChangedNotification</span><span class="p">,</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">myFirstElement</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>2）直接播放一段语音。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objectivec'><span class='line'><span class="n">UIAccessibilityPostNotification</span><span class="p">(</span><span class="n">UIAccessibilityAnnouncementNotification</span><span class="p">,</span> <span class="s">@&quot;something to read aloud&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h5>参考:</h5>

<p>[1] voiceover-accessibility
[2] voiceover官方文档:AccessibilityfromtheViewControllersPerspective
[3] voiceover introduction</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iBeacon原理和应用]]></title>
    <link href="http://bupojung.github.io/blog/2015/12/04/ibeaconyuan-li-he-ying-yong/"/>
    <updated>2015-12-04T17:01:05+08:00</updated>
    <id>http://bupojung.github.io/blog/2015/12/04/ibeaconyuan-li-he-ying-yong</id>
    <content type="html"><![CDATA[<p><img src="http://bupojung.github.io/static/2015/12/05/ibeaconLogo" alt="Alt text" /></p>

<h2>简介</h2>

<blockquote><p>iBeacon是苹果在iOS 7.0 引入的一项新的位置感知特性，其工作方式是，配备有 低功耗蓝牙（<strong>Bluetooth Low Energy </strong>，BLE）通信功能的设备使用BLE技术向周围发送自己特有的ID，接收到该ID的应用软件会根据接收到的ID和信号源产生互动。不同功率的BLE设备的信号范围在10m~100m不等，当手机进入信号范围时，能接收到信号源广播的ID（UUID+Major+Minor）, App通过解析接收到的ID向用户推送通知或者其他资讯。</p></blockquote>

<!-- more -->


<h2>原理</h2>

<h4>BLE</h4>

<p>Bluetooth Low Energy（BLE）是2010年发布的蓝牙4.0技术规范的一部分。BLE最重要的特点当然在于它的低能耗。传统蓝牙和LE蓝牙使用的都是相同的波段（2.4GHz-2.4835GHz）。BLE协议的传输速率比较低，因此除了用于发现设备和做一些简单通信之外，不太适合用于传输大量的数据流。在协议条款上，LE和传统蓝牙的信号都能够覆盖到100米的范围。</p>

<h4>iBeacon广播信息UUID+Major+Minor</h4>

<p>每个iBeacon设备都有一个唯一ID(UUID+Major+Minor)，在一个区域内广播信号，通过信号中的ID信息标记一个特定区域。
| Filed     |    size | Description  |
| :&mdash;&mdash;&ndash; | &mdash;&mdash;&ndash;:| :&ndash;: |
| UUID      |  16 bytes|  用于将你的iBeacon和别的iBeacon区别的唯一标识   |
| Major     |   2 bytes|  用于将相关的iBeacon标记为一组  |
| Minor     |   2 bytes|  标记特定的一个iBeacon  |
举个例子，如果你有一家全国连锁百货公司，你可以在你的店里部署iBeacon，当用户进入iBeacon范围内的时候提供一定的优惠资讯，那么你所有的 iBeacon 发射器都可有同一个 UUID ，但每个店都有它自己的Major值，而里面的每个部门就会有它自己的Minor值。如下表所示：
<img src="http://bupojung.github.io/static/2015/12/05/ibeaconUUID" alt="Alt text" /></p>

<h2>应用</h2>

<blockquote><p>iBeacon作为一种位置感知技术，现有的应用主要有两个方面：1. 通过检测是否进入iBeacon区域向用户进行消息推送；2. 通过利用信号强度以及部署的基站信息进行室内定位。</p>

<h4>利用 iBeacon 进行消息推送</h4>

<p>苹果在iOS 7 及以上为iBeacon提供了系统级的支持，如果在iOS App中监听了某一个特定的iBeacon，当用户持手机进入该iBeacon信号范围内时，应用会被唤醒。我们所说的利用iBeacon进行消息推送，其实是需要App配合的。</p></blockquote>

<p><strong>目前推送的实现逻辑有几种：</strong></p>

<ul>
<li><p>用户进入 iBeacon 覆盖范围 －> 应用被唤醒 －> 应用请求云端数据 －> 应用发送 Local Notification 向用户推送内容。</p>

<blockquote><p>优点:推送内容实时性，自定义程度高
缺点:网络条件要求高</p></blockquote></li>
<li><p>用户进入 iBeacon 覆盖范围 －> 应用被唤醒 －> 应用查看本地缓存推送内容 －> 应用发送 Local Notification 向用户推送内容。</p>

<blockquote><p>优点: 不需要网络
缺点:推送内容实时性较差</p></blockquote></li>
<li><p>用户进入 iBeacon 覆盖范围 －> 打开应用－> 应用主动搜索周边的iBeacon信号－> 根据收到的iBeacon向用户托送信息。</p>

<blockquote><p>优点：可以对多个iBeacon进行处理
缺点: 需要主动触发</p>

<h4>室内定位</h4>

<p>iBeacon 的信号强度采用 RSSI（Received Signal Strength Indication接收的信号强度指示） 值表示。与其他无线信号一样,随着距离的远近, RSSI 值会产生 变化。我么可以通过 RSSI 值的变化来判断用户距离 iBeacon 设备的远近。而设备距离 iBeacon 的距离,在 iOS SDK 中可直接通过 iBeacon 对应的 Accuracy 值读出,单位为米。</p></blockquote></li>
</ul>


<p>但由于信号的波动,以及物理空间复杂的环境因素。iBeacon 的距离测算并不是十分精准,所 以 Apple 定义了四种范围值:</p>

<ul>
<li>Immediate 很近，小于1米。</li>
<li>Near 附近,约1⽶-3米。</li>
<li>Far 较远。</li>
<li>Unknown 未知，⼀般出现在启动阶段，或者因为某些原因⽆无法判断。
这里的Far，设备不一定距离iBeacon真的很远，很可能距离iBeacon很近（比如1米），但是没有足够的信息证明设备距离iBeacon很近。所以Far只是表示一个范围，设备可能在范围内的任一点。
<img src="http://bupojung.github.io/static/2015/12/05/ibeaconPhone" alt="enter image description here" /></li>
</ul>


<blockquote><p><strong>Tips</strong>：iBeacon是一种位置感知技术，要用于定位需要知道iBeacon基站的物理位置部署信息，并通过复杂的算法计算用户位置。</p></blockquote>

<p><strong>定位方案</strong>
* 单点定位
    当时别到有在near（1m内）范围内的iBeacon基站时就是用该基站的位置坐标作为用户当前坐标。可以通过部署密集的iBeacon设备达到较高的定位精度。比如在博物馆内不同展区部署iBeacon达到室内定位的作用。
* 两点定位
根据两点确定一条双曲线的原理，通过计算识别到的两个ibeacon设备的RSSI信号计算用户的位置。一般适合在相对狭长的的物理空间内定位，通过物理空间的局限，配合RSSI值计算可以达到较好的定位效果。
* 多点定位
和两点定位类似，通过RSSI值计算到三个iBeacon设备的距离，计算用户位置。此种方式算法比较复杂，适合在空旷的场所部署。</p>

<h3>iOS API使用</h3>

<p><strong>iOS系统提供两种处理iBeacon的能力：</strong>
*  Beacon区域的监控
*  估算到iBeacon的距离</p>

<h4>区域监控</h4>

<p>iOS把对iBeacon的支持集成在CoreLocation框架下，使用CLLocationManager类检测iBeacon信号，CLBeaconRegion描述一个iBeacon基站区域。</p>

<p><img src="http://bupojung.github.io/static/2015/12/05/ibeaconClass" alt="enter image description here" /></p>

<h5>sampleCode: 检测一个Region</h5>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="c1">//定位权限申请</span>
</span><span class='line'><span class="n">CLAuthorizationStatus</span> <span class="n">stat</span> <span class="o">=</span> <span class="p">[</span><span class="bp">CLLocationManager</span> <span class="n">authorizationStatus</span><span class="p">]</span> <span class="p">;</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">stat</span> <span class="o">==</span> <span class="n">kCLAuthorizationStatusDenied</span> <span class="o">||</span> <span class="n">stat</span> <span class="o">==</span> <span class="n">kCLAuthorizationStatusRestricted</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;not allowed!&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="n">stat</span> <span class="o">==</span> <span class="n">kCLAuthorizationStatusNotDetermined</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="n">requestAlwaysAuthorization</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//创建一个beaconRegion</span>
</span><span class='line'><span class="bp">NSUUID</span> <span class="o">*</span><span class="n">uuid</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">NSUUID</span> <span class="n">alloc</span><span class="p">]</span><span class="nl">initWithUUIDString</span><span class="p">:</span><span class="s">@&quot;74278BDA-B644-4520-8F0C-720EAF059935&quot;</span><span class="p">];</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">region</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">CLBeaconRegion</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithProximityUUID</span><span class="p">:</span><span class="n">uuid</span> <span class="nl">identifier</span><span class="p">:</span><span class="n">BeaconIdentifier</span><span class="p">];</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">region</span><span class="p">.</span><span class="n">notifyEntryStateOnDisplay</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">region</span><span class="p">.</span><span class="n">notifyOnEntry</span> <span class="o">=</span> <span class="nb">YES</span><span class="p">;</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">region</span><span class="p">.</span><span class="n">notifyOnExit</span> <span class="o">=</span> <span class="nb">NO</span><span class="p">;</span>
</span><span class='line'><span class="c1">//开始监控</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">CLLocationManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="n">init</span><span class="p">];</span>
</span><span class='line'><span class="nb">self</span><span class="p">.</span><span class="n">locationManager</span><span class="p">.</span><span class="n">delegate</span> <span class="o">=</span> <span class="nb">self</span><span class="p">;</span>
</span><span class='line'><span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="nl">startMonitoringForRegion</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">region</span><span class="p">];</span>
</span><span class='line'><span class="k">if</span> <span class="p">([</span><span class="bp">CLLocationManager</span> <span class="n">isRangingAvailable</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">[</span><span class="nb">self</span><span class="p">.</span><span class="n">locationManager</span> <span class="nl">startRangingBeaconsInRegion</span><span class="p">:</span><span class="nb">self</span><span class="p">.</span><span class="n">region</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果启动成功，locationmanager会开始回调region的状态，调用时机通过<strong>CLBeaconRegion对象的参数设置</strong>：</p>

<blockquote><ul>
<li>notifyEntryStateOnDisplay:当手机屏幕亮着的时候，如果用户在监控区域内会收到回调；</li>
<li>notifyOnExit：离开region收到回调；</li>
<li>notifyOnEntry：进入region收到回调；</li>
</ul>
</blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="bp">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didDetermineState:</span><span class="p">(</span><span class="n">CLRegionState</span><span class="p">)</span><span class="nv">state</span> <span class="nf">forRegion:</span><span class="p">(</span><span class="bp">CLRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span>
</span></code></pre></td></tr></table></div></figure>


<h4>检测iBeacon距离（Ranging Beacons）</h4>

<p>当用户进入iBeacon区域后，设备可以获得更高精度的信号采样，从而可以检查在区域内的iBeacon设备信号强度和估算距离。iOS API提供了如下几个接口处理CLBeaconRegion内的iBeacon设备距离的检测：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">startRangingBeaconsInRegion:</span><span class="p">(</span><span class="bp">CLBeaconRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span><span class="err">；</span>
</span><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">stopRangingBeaconsInRegion</span><span class="p">:(</span><span class="bp">CLBeaconRegion</span> <span class="o">*</span><span class="p">)</span><span class="n">region</span><span class="err">；</span>
</span></code></pre></td></tr></table></div></figure>


<p>推荐在接收到 CLLocationManager:didDetermineState: callback回调并确定进入某个区域后，调用startRangingBeaconInRegion:检测区域内的iBeacon距离，当用户收到离开该区域后调用stopRangingBeaconInRegion：。
调用startRangingBeaconsInRegion:后，系统会定时回调以下方法：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">locationManager:</span><span class="p">(</span><span class="bp">CLLocationManager</span> <span class="o">*</span><span class="p">)</span><span class="nv">manager</span> <span class="nf">didRangeBeacons:</span><span class="p">(</span><span class="bp">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">beacons</span> <span class="nf">inRegion:</span><span class="p">(</span><span class="bp">CLBeaconRegion</span> <span class="o">*</span><span class="p">)</span><span class="nv">region</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中beacons参数是在该区域内检测到得iBeacon设备信息列表，我们可以从中得到区域内多个iBeacon设备的信息。
<img src="http://bupojung.github.io/static/2015/12/05/CLBeaconClass" alt="enter image description here" /></p>

<blockquote><ul>
<li>proximity：初略估算iBeacon的距离，有几种状态，CLProximityUnknown, CLProximityImmediate, CLProximityNear, 和 CLProximityFar；</li>
<li>accuracy：估算距离，单位m；</li>
<li>rssi：信号强度；</li>
</ul>
</blockquote>

<p><img src="http://bupojung.github.io/static/2015/12/05/range" alt="enter image description here" /></p>

<h4>问题</h4>

<ul>
<li><p>如何监控多个Region？
可以监控多个Region，每个region的identifier属性不能一样，如果一样会覆盖掉相同属性的Region，通过调用 tartRangingBeaconsInRegion:注册监听的Region。</p></li>
<li><p>能否监控未提前知道UUID的iBeacon设备？
  iOS没有公开的API支持这个功能，监控iBeacon区域需要先知道UUID。MacOSX可以通过解析蓝牙广播报文获得iBeacon UUID+Major+Minor.iOS不支持。</p>

<h2>有趣的应用场景</h2></li>
<li>天气助手
<img src="http://bupojung.github.io/static/2015/12/05/ex1" alt="enter image description here" />
你是否遇到过忘记看天气预报下雨出门没带雨伞？或者看了天气预报，匆匆出门还是忘带了。日本一家公司推出了一个基于iBeacon的使用工具，可以让你轻松甩掉这个烦恼。只需要下载这个APP,并且购买一个iBeacon小装置放在门口，当每天出门时不用打开APP,如果要下雨APP会自动弹出提醒你带好雨伞！</li>
<li><p>追踪行李的小应用
<img src="http://bupojung.github.io/static/2015/12/05/ex2" alt="enter image description here" />
等行李所有人都有过痛苦的经历，伸长脖子盯着自己的行李是否出来了。通过在行李箱防止iBeacon，当行李箱接近是弹出提醒，有了这个iBeacon应用，可以轻松的坐在边上等着，手机会自动感应行李的到来</p></li>
<li><p>意大利动物园部署iBeacon互动导览
<img src="http://bupojung.github.io/static/2015/12/05/ex3" alt="enter image description here" />
就可以用手机根据游览位置解锁相应导览介绍和获得游览奖励了，这完全基于iBeacon技术，它被安装爱金16万平米的园区里，可以为整个游览过程带来寓教于乐的新奇体验。APP提供了一张可以与游览者互动的电子地图，不但起到导览，而且可以在有特色的重点区域给予自动提示。</p></li>
<li><p>iBeacon还可以帮助咖啡馆这样运营
美国的一家创业公司专门针对咖啡馆推出了一款APP,通过安装在咖啡馆里的iBeacon基站提供订位，计时长和自动付款服务。很多咖啡馆会遇到来坐着不消费又蹭网的问题，这个APP建议咖啡馆干脆退出类似场地租用的服务，通过所待时长收取一定费用，消费者可以通过APP远程预定座位，收取一定数额定金，当走入咖啡馆时通过iBeacon自动感应签到提示并开始计时，离开时自动计算所待时长和从关联的信用卡扣除相应费用。</p></li>
<li><p>博物馆，shopping mall</p>

<h4>支持iBeacon的手机</h4>

<p>运行 iOS7 以上版本的手机，包括：</p></li>
<li>iPhone 4S 及以上；</li>
<li>iPad 2 及以上；</li>
<li>iPod 5；</li>
</ul>


<p>运行 Android 4.3 以上，支持蓝牙 4.0 的安卓设备，常见设备有：</p>

<ul>
<li>三星 Galaxy 系列；</li>
<li>华为荣耀3C及以上；</li>
<li>小米 2S 及以上；</li>
</ul>


<p><strong>借鉴微信的接入流程：</strong></p>

<p><img src="http://bupojung.github.io/static/2015/12/05/wechat" alt="enter image description here" /></p>

<p>如上图，实现分如下四个步骤：
       第一步. 服务提供者向微信后台申请服务，微信后台生成一个IBeaconId,并将其映射到服务提供者提供的服务，再将IBeaconId告诉服务提供者;
       第二步. 服务提供者把第一步拿到的IBeaconId设置到IBeacon设备上，让IBeacon设备广播该IBeaconId;
       第三步. 用户在该IBeacon设备的信号范围内打开微信摇一摇周边，微信App拿到该IBeaconId;
       第四步. 微信通过第三步拿到的IBeaconId，向微信后台拉取相应的服务，展示在摇出来的结果上。
       第五步. 用户点击摇出来结果，在微信内嵌的浏览器上，会带上用户信息跳转到服务提供者在第一步申请服务时填的url，进入应用页面</p>

<h2>总结</h2>

<p>iBeacon可能是一个在较长时间被低估了的技术，尤其在对O2O线下消费的体验丰满与提升方面，不过这种状况可能随着一些巨头的尝试性介入而得到改变。</p>

<h2>参考</h2>

<ul>
<li><a href="http://djt.qq.com/article/view/1284">微信摇一摇周边</a></li>
<li><a href="http://blog.sensoro.com/ibeacon-ding-wei-shi-jian/">iBeacon定位实践</a></li>
<li><a href="http://developer.radiusnetworks.com/2013/11/13/ibeacon-monitoring-in-the-background-and-foreground.html">Beacon Monitoring in the Background and Foreground</a></li>
<li><a href="http://beekn.net/2013/10/ibeacons-can-my-ios-app-find-beacons-that-arent-mine/">iBeacons: Can My iOS App Find Beacons That Aren’t Mine?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用NSURLProtocol劫持WebView请求]]></title>
    <link href="http://bupojung.github.io/blog/2015/11/30/li-yong-nsurlprotocoljie-chi-webviewqing-qiu/"/>
    <updated>2015-11-30T11:08:36+08:00</updated>
    <id>http://bupojung.github.io/blog/2015/11/30/li-yong-nsurlprotocoljie-chi-webviewqing-qiu</id>
    <content type="html"><![CDATA[<h2>利用NSURLProtocol劫持WebView请求</h2>

<h3>背景:</h3>

<blockquote><p>由于很多增值业务使用的是H5页面实现，在开发测试过程中页面不能发布到正式环境，开发、测试以及产品同学需要配置代理或者配host来体验产品，这样测试和体验产品的效率比较低，沟通成本比较高。基于这种情况，我们实现了一套测试环境切换平台，通过在页面上配置url转发规则，终端根据配置信息判断是否将请求转发到代理服务器，代理服务器再根据代理转发规则将请求转发到对应的测试环境，实现测试环境切换自动化，提高测试体验效率。本文介绍iOS终端如何利用NSURLProtocol劫持Webview请求实现请求转发。</p></blockquote>

<!-- more -->


<h3>NSURLProtocol：</h3>

<p>任何通过NSURLConnection发起的请求都会被NSURLProtocol截获，NSURLProtocol是一个抽象类，我们可以继承它实现自定义的URL加载行为。并将自定义的NSURLProtocol子类注册到NSURLProtocol，每次NSURLConnection发起请求被NSURLProtocol截获后将遍历已注册的子类是否能响应这个请求，响应请求的NSURLProtocol子类将发起请求并处理请求回调，将结果通知到NSURLConnection，所有实际的URL加载过程都是在NSURLProtocol子类完成。系统提供了现成的NSURLProtocol子类有：NSHTTPURLProtocol，NSFTPURLProtocol，NSFileURLProtocol等。具体的交互过程如下图所示：
<img src="http://bupojung.github.io/static/2015/11/30/NSURLProtocol_Sequence_Diagram" alt="NSURLProtoco" /></p>

<blockquote><p>注：NSURLProtocol在遍历子类的过程是反向遍历的，最后注册的子类会先被遍历，这样自定义的子类将能提前截获请求，当一个子类截获请求后，将终止遍历。</p></blockquote>

<p>上图是NSURLConnection发起请求的过程，简化了缓存处理的逻辑。可以看出NSURLProtocol给我们提供了一种截获请求的机制。</p>

<h3>实现:</h3>

<p>继承NSURLProtocol，实现一下几个接口：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>//判断是否响应request，返回YES表示这个NSURLProtocol子类将处理这个请求，其他NSURLProtocol将不再处理此请求。
</span><span class='line'>+ (BOOL)canInitWithRequest:(NSURLRequest *)request; 
</span><span class='line'>//返回与参数request对应的一个NSURLRequest对象，返回的对象将用来在Cache中判断两个request是否相等，必须保证同一个request的canonicalRequest相同。一般情况直接返回参数request。 
</span><span class='line'>+ (NSURLRequest *)canonicalRequestForRequest:(NSURLRequest *)request; 
</span><span class='line'>//比较cache中的两个request是否相等，默认实现是判断两个request的url是否相等，子类可以重写。 
</span><span class='line'>+ (BOOL)requestIsCacheEquivalent:(NSURLRequest *)aRequest toRequest:(NSURLRequest *)bRequest; 
</span><span class='line'>//如果canInitWithRequest返回YES，NSURLConnection将调用startLoading加载数据。
</span><span class='line'>- (void)startLoading; 
</span><span class='line'>//如果canInitWithRequest返回YES，NSURLConnection将调用stopLoading停止加载数据。 
</span><span class='line'>- - (void)stopLoading;</span></code></pre></td></tr></table></div></figure>


<h3>实现步骤</h3>

<ul>
<li>在+ (BOOL)canInitWithRequest:(NSURLRequest *)request 方法中判断请求的URL是否需要转发到测试环境，如果需要转发返回YES，不需要返回NO。</li>
<li>在- (void)startLoading 方法中重新创建一个Request，替换URL，创建一个新的NSURLConnection发起请求，将请求转发到代理服务器。</li>
<li>实现NSURLConnectionDelegate，将返回的数据回调给NSURLProtocol的client属性，client属性是一个实现了NSURLProtocolClient接口的对象，在此请求过程中client是第一次发起请求的NSURLConnection对象。</li>
</ul>


<p><img src="http://bupojung.github.io/static/2015/11/30/NSURLProtocol_implement" alt="实现步骤" /></p>

<blockquote><p>注意：在第2个步骤中，需要标记新创建的Request对象，由于NSURLConnection发起请求，又会被protocol截获处理，这样可能陷入死循环。所以这里需要给新创建的request标记，在+ (BOOL)canInitWithRequest:(NSURLRequest *)request方法中截获到标记过的request直接返回NO，不处理。
 步骤3，需要处理重定向请求，由于新发起的请求被标记过，如果请求被重定向，protocol将不再处理重定向的请求，这样重定向的请求就无法截获。这里的方法是截获重定向请求，将request的标记删除。</p></blockquote>

<h3>源代码</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@interface BPDebugURLProtocol ()
</span><span class='line'>@property (nonatomic, strong) NSURLConnection *connection;
</span><span class='line'>
</span><span class='line'>@end
</span><span class='line'>
</span><span class='line'>@implementation BPDebugURLProtocol
</span><span class='line'>+ (BOOL)canInitWithRequest:(NSURLRequest *)request
</span><span class='line'>{
</span><span class='line'>    
</span><span class='line'>    BPWebDebugEvnConfig *config = [BPWebDebugEvnConfig shareInstance];
</span><span class='line'>    if(![config isFromWebView:request])//只处理来自webview的请求
</span><span class='line'>    {
</span><span class='line'>        BP_TRACE("debugURLProtocol:%s NotFromWebView return NO",[request.URL.absoluteString UTF8String]);
</span><span class='line'>        return NO;
</span><span class='line'>    }
</span><span class='line'>    //无论是否开启测试环境模式，对代理服务器域名的请求进行转发，不然用户无法访问代理配置页面。
</span><span class='line'>    if ([config isProxyDomian:request.URL.host]) {
</span><span class='line'>        BP_TRACE("debugURLProtocol:%s isProxyDomian return YES",[request.URL.absoluteString UTF8String]);
</span><span class='line'>        return YES;
</span><span class='line'>    }
</span><span class='line'>    if ([config isDebugModeOn] && [NSURLProtocol propertyForKey:kProxyTag inRequest:request] == nil) {
</span><span class='line'>        NSString *proxyID = [config proxyIDForURL:request.URL.absoluteString];
</span><span class='line'>        if (proxyID != nil) {
</span><span class='line'>            BP_TRACE("debugURLProtocol:%s proxyID return YES",[request.URL.absoluteString UTF8String]);
</span><span class='line'>            return YES;
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    BP_TRACE("debugURLProtocol:%s return NO",[request.URL.absoluteString UTF8String]);
</span><span class='line'>    return NO;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>+ (NSURLRequest *)canonicalRequestForRequest:(NSURLRequest *)request
</span><span class='line'>{
</span><span class='line'>    return request;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)startLoading
</span><span class='line'>{
</span><span class='line'>    BPWebDebugEvnConfig *config = [BPWebDebugEvnConfig shareInstance];
</span><span class='line'>    NSString *proxyID = [config proxyIDForURL:self.request.URL.absoluteString];
</span><span class='line'>    BP_TRACE("startLoading:%s,URL:%s",[proxyID UTF8String],[self.request.URL.absoluteString UTF8String]);
</span><span class='line'>    if (proxyID != nil) {
</span><span class='line'>        NSMutableURLRequest *newRequest = [self.request mutableCopy];
</span><span class='line'>        if ([proxyID isEqualToString:DEFAULTPROXYID]) {
</span><span class='line'>            //不走代理，走url替换
</span><span class='line'>            NSString *newURL = [config replacedURLForURL:self.request.URL.absoluteString];
</span><span class='line'>            if (newURL) {
</span><span class='line'>                [newRequest setURL:[NSURL URLWithString:newURL]];
</span><span class='line'>                NSDictionary *cookieHeaders = [self cookiesForRequest:self.request];
</span><span class='line'>                [newRequest setValue: [cookieHeaders objectForKey: @"Cookie" ]forHTTPHeaderField:@"Cookie"];
</span><span class='line'>            }else
</span><span class='line'>            {
</span><span class='line'>                BP_ERROR("replace URL is nil");
</span><span class='line'>                return;
</span><span class='line'>            }
</span><span class='line'>        }else
</span><span class='line'>        {
</span><span class='line'>            NSURL *newURL = [self newURLForURL:self.request.URL];
</span><span class='line'>            NSDictionary *cookieHeaders = [self cookiesForRequest:self.request ];//withProxyURL:newURL];
</span><span class='line'>            [newRequest setURL:newURL];
</span><span class='line'>            NSInteger timestamp = (NSInteger)[[NSDate date]timeIntervalSince1970];
</span><span class='line'>            NSString *md5value = [self MD5WithCookies:[cookieHeaders objectForKey: @"Cookie" ] proxyID:proxyID timestamp:timestamp req:newRequest];
</span><span class='line'>            NSString *uin = [[serviceFactoryInstance() getAccountService] getUinStr];
</span><span class='line'>            NSString *value = [NSString stringWithFormat:@"%@,%@,%d,%@,%@",proxyID,[UIDevice deviceIdentifier],timestamp,uin,md5value];
</span><span class='line'>            [newRequest setValue:value forHTTPHeaderField:kExtensionHeader];
</span><span class='line'>            [newRequest setValue: [cookieHeaders objectForKey: @"Cookie" ]forHTTPHeaderField:@"Cookie"];
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        [NSURLProtocol setProperty:@YES forKey:kProxyTag inRequest:newRequest];
</span><span class='line'>        newRequest.cachePolicy = NSURLRequestReloadIgnoringCacheData;
</span><span class='line'>        self.connection = [NSURLConnection connectionWithRequest:newRequest delegate:self];
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)stopLoading {
</span><span class='line'>    [self.connection cancel];
</span><span class='line'>    self.connection = nil;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data
</span><span class='line'>{
</span><span class='line'>    NSString * refererUrl =   connection.originalRequest.allHTTPHeaderFields[@"Referer"];
</span><span class='line'>    NSString *  finalUrlStr= [[BPWebDebugMainRequestCache shareInstance]finalURLStr];
</span><span class='line'>    BOOL isShowTips = [[BPWebDebugMainRequestCache shareInstance]isShowTips];
</span><span class='line'>    
</span><span class='line'>    BPWebViewController * webViewController =[[BPWebDebugMainRequestCache shareInstance] currentWebviewController];
</span><span class='line'>    
</span><span class='line'>    BOOL isNeedIgnore =[self isNeedIgnoreWithURL:finalUrlStr];
</span><span class='line'>    //如果不忽略的域名内，则进行检测
</span><span class='line'>    if (isNeedIgnore ==NO)
</span><span class='line'>    {
</span><span class='line'>        // 替换URL走这里
</span><span class='line'>        BPWebDebugEvnConfig *config = [BPWebDebugEvnConfig shareInstance];
</span><span class='line'>        NSString *proxyID = [config proxyIDForURL:finalUrlStr];
</span><span class='line'>        if (proxyID != nil && isShowTips ==NO)
</span><span class='line'>        {
</span><span class='line'>            [self showTipsOnViewController:webViewController];
</span><span class='line'>        }
</span><span class='line'>        
</span><span class='line'>        //代理走这里
</span><span class='line'>        BOOL isEqual  =  [self isFromSource:finalUrlStr subRequestReferer:refererUrl];
</span><span class='line'>        //原请求url和referer相同，webviewcontroller，finalUrlStr不为空，isShowTips没提示过
</span><span class='line'>        if (isEqual == YES &&  webViewController!=nil  && finalUrlStr!=nil &&  isShowTips ==NO)
</span><span class='line'>        {
</span><span class='line'>            [self showTipsOnViewController:webViewController];
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    
</span><span class='line'>    
</span><span class='line'>    [self.client URLProtocol:self didLoadData:data];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error
</span><span class='line'>{
</span><span class='line'>    [self.client URLProtocol:self didFailWithError:error];
</span><span class='line'>    self.connection = nil;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response
</span><span class='line'>{
</span><span class='line'>    NSArray *cookies = [NSHTTPCookie cookiesWithResponseHeaderFields:[(NSHTTPURLResponse*)response allHeaderFields] forURL:response.URL];
</span><span class='line'>    NSArray *newCookies = [self cookies:cookies ToDomain:self.request.URL.host];
</span><span class='line'>    [[NSHTTPCookieStorage sharedHTTPCookieStorage] setCookies:newCookies forURL:self.request.URL mainDocumentURL:nil];
</span><span class='line'>    [self.client URLProtocol:self didReceiveResponse:response cacheStoragePolicy:NSURLCacheStorageNotAllowed];//不缓存
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>- (void)connectionDidFinishLoading:(NSURLConnection *)connection
</span><span class='line'>{
</span><span class='line'>    [self.client URLProtocolDidFinishLoading:self];
</span><span class='line'>    self.connection = nil;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>- (NSCachedURLResponse *)connection:(NSURLConnection *)connection
</span><span class='line'>                  willCacheResponse:(NSCachedURLResponse *)cachedResponse
</span><span class='line'>{
</span><span class='line'>    return nil;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>//302重定向
</span><span class='line'>- (NSURLRequest *)connection:(NSURLConnection *)connection
</span><span class='line'>             willSendRequest:(NSURLRequest *)request
</span><span class='line'>            redirectResponse:(NSURLResponse *)redirectResponse
</span><span class='line'>{
</span><span class='line'>    if ([redirectResponse isKindOfClass:[NSHTTPURLResponse class]]) {
</span><span class='line'>        NSHTTPURLResponse *httpRes = (NSHTTPURLResponse *)redirectResponse;
</span><span class='line'>        if ([httpRes statusCode] == 302) {
</span><span class='line'>            NSMutableURLRequest *req = [request copy];
</span><span class='line'>            [NSURLProtocol removePropertyForKey:kProxyTag inRequest:req];
</span><span class='line'>            request = [req copy];
</span><span class='line'>            [self.client URLProtocol:self wasRedirectedToRequest:request redirectResponse:redirectResponse];
</span><span class='line'>        }
</span><span class='line'>    }
</span><span class='line'>    return request;
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[App Thinning]]></title>
    <link href="http://bupojung.github.io/blog/2015/11/30/app-thinning/"/>
    <updated>2015-11-30T00:25:58+08:00</updated>
    <id>http://bupojung.github.io/blog/2015/11/30/app-thinning</id>
    <content type="html"><![CDATA[<h2>App Thinning</h2>

<p>@(学习)[ios9|xcode]</p>

<blockquote><p>iOS8刚发布的时候，要更新到最新版本需要用户手机至少5.7GB的剩余空间，导致很多16GB手机的用户不愿意升级到最新版本。苹果为了提高新版本的覆盖率，在iOS9做了一系列的安装包大小的优化，更新到iOS9只需要1.3GB的剩余空间。除了对系统包大小进行优化外，苹果为了为用户腾出更多的空间，推出了一些列方案为应用减少包大小，也就是App Thinning。</p></blockquote>

<!-- more -->


<p>App Thining包括三项技术：
* App Slicing
* On Demand Resources (ODR)
* BitCode</p>

<p>这三项技术通过优化安装包生成，发布，下载的流程来减少应用最终安装到用户手机上的占用空间。下面分别介绍：</p>

<h3>App Slicing</h3>

<p>大部分应用需要支持不同的苹果设备，包括iPhone4~iPhone6P,各种iPad，不同的设备有不同的屏幕分辨率，不同的屏幕尺寸，不同的CPU和GPU，一般情况下应用会把所有的 支持不同设备的资源（1x,2x,3x的图片，支持GPU的渲染资源）和支持不同硬件架构的二进制代码（支持32bit和64bit）都打包到安装包提交到AppStore，然后用户下载安装应用，这样用户的手机空间里就会包含很多冗余的数据。</p>

<p>为了解决这个问题，苹果提出了App Slicing，Xcode在创建安装包的时候对针对不同设备的资源和二进制数据进行标记，并创建一个支持不同设备的安装包，提交到AppStore。用户在下载应用的时候，AppStore根据用户的设备类型生成只针对该设备的安装包。这样对用户来说就减少了安装包大小，不需要下载多余的数据。</p>

<p><img src="http://bupojung.github.io/static/appthining" alt="Alt text" /></p>

<p>新版的XCode将会支持App Slicing，开发者可以生成一个通用的安装包，然后导出针对不同特定设备的安装包进行安装包大小比较，同时用针对不同设备的安装包进行测试。</p>

<h3>On Demand Resources（ODR）</h3>

<p>ODR顾名思义，就是在需要的时候去下载资源（包括图片和声音），不是必要的资源不随安装包一起下载，而是在用户使用应用到某个场景的时候才去服务器下载资源。这样的好处是下载应用更快，同时提高第一次启动应用的体验。这些资源由AppStore存储维护。比如，游戏应用可以把根据游戏关卡对资源进行分组，当用户将要进行到下一个关卡的时候才去请求资源。
Xcode7通过对资源进行分组标记支持ODR，通过使用一个关键字对一组资源进行标记，安装包提交到AppStore后，AppStore会对标记的资源进行分离存储，最终用户下载的安装包将不包含这部分数据。应用通过NSBundleResourceRequest接口下载需要的资源。</p>

<h3>BitCode</h3>

<p>BitCode可以理解为应用程序的中间代码（Bitcode is an intermediate representation of a compiled program.）。提交到AppStore的包会包含Bitcode，AppStore会使用bitcode对应用重新编译生成最终的安装包。这样的好处是如果未来SDK更新了，开发者不需要提交新版本，苹果就能使用bitcode基于新SDK对应用进行重新编译生成支持SDK新特性的安装包。</p>
]]></content>
  </entry>
  
</feed>
